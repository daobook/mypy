# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Jukka Lehtosalo
# This file is distributed under the same license as the Mypy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mypy "
"0.940+dev.ff5f71d674aece3095b7a623cc910e48c5a01c1e.dirty\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-04 14:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/getting_started.rst:4
msgid "Getting started"
msgstr ""

#: ../../source/getting_started.rst:6
msgid ""
"This chapter introduces some core concepts of mypy, including function "
"annotations, the :py:mod:`typing` module, library stubs, and more."
msgstr ""

#: ../../source/getting_started.rst:9
msgid ""
"Be sure to read this chapter carefully, as the rest of the documentation "
"may not make much sense otherwise."
msgstr ""

#: ../../source/getting_started.rst:13
msgid "Installing and running mypy"
msgstr ""

#: ../../source/getting_started.rst:15
msgid ""
"Mypy requires Python 3.6 or later to run.  Once you've `installed Python "
"3 <https://www.python.org/downloads/>`_, install mypy using pip:"
msgstr ""

#: ../../source/getting_started.rst:23
msgid "Once mypy is installed, run it by using the ``mypy`` tool:"
msgstr ""

#: ../../source/getting_started.rst:29
msgid ""
"This command makes mypy *type check* your ``program.py`` file and print "
"out any errors it finds. Mypy will type check your code *statically*: "
"this means that it will check for errors without ever running your code, "
"just like a linter."
msgstr ""

#: ../../source/getting_started.rst:34
msgid ""
"This means that you are always free to ignore the errors mypy reports and"
" treat them as just warnings, if you so wish: mypy runs independently "
"from Python itself."
msgstr ""

#: ../../source/getting_started.rst:38
msgid ""
"However, if you try directly running mypy on your existing Python code, "
"it will most likely report little to no errors: you must add *type "
"annotations* to your code to take full advantage of mypy. See the section"
" below for details."
msgstr ""

#: ../../source/getting_started.rst:44
msgid ""
"Although you must install Python 3 to run mypy, mypy is fully capable of "
"type checking Python 2 code as well: just pass in the :option:`--py2 "
"<mypy --py2>` flag. See :ref:`python2` for more details."
msgstr ""

#: ../../source/getting_started.rst:53
msgid "Function signatures and dynamic vs static typing"
msgstr ""

#: ../../source/getting_started.rst:55
msgid ""
"A function without type annotations is considered to be *dynamically "
"typed* by mypy:"
msgstr ""

#: ../../source/getting_started.rst:62
msgid ""
"By default, mypy will **not** type check dynamically typed functions. "
"This means that with a few exceptions, mypy will not report any errors "
"with regular unannotated Python."
msgstr ""

#: ../../source/getting_started.rst:65
msgid ""
"This is the case even if you misuse the function: for example, mypy would"
" currently not report any errors if you tried running ``greeting(3)`` or "
"``greeting(b\"Alice\")`` even though those function calls would result in"
" errors at runtime."
msgstr ""

#: ../../source/getting_started.rst:69
msgid ""
"You can teach mypy to detect these kinds of bugs by adding *type "
"annotations* (also known as *type hints*). For example, you can teach "
"mypy that ``greeting`` both accepts and returns a string like so:"
msgstr ""

#: ../../source/getting_started.rst:78
msgid ""
"This function is now *statically typed*: mypy can use the provided type "
"hints to detect incorrect usages of the ``greeting`` function. For "
"example, it will reject the following calls since the arguments have "
"invalid types:"
msgstr ""

#: ../../source/getting_started.rst:90
msgid ""
"Note that this is all still valid Python 3 code! The function annotation "
"syntax shown above was added to Python :pep:`as a part of Python 3.0 "
"<3107>`."
msgstr ""

#: ../../source/getting_started.rst:93
msgid ""
"If you are trying to type check Python 2 code, you can add type hints "
"using a comment-based syntax instead of the Python 3 annotation syntax. "
"See our section on :ref:`typing Python 2 code <python2>` for more "
"details."
msgstr ""

#: ../../source/getting_started.rst:97
msgid ""
"Being able to pick whether you want a function to be dynamically or "
"statically typed can be very helpful. For example, if you are migrating "
"an existing Python codebase to use static types, it's usually easier to "
"migrate by incrementally adding type hints to your code rather than "
"adding them all at once. Similarly, when you are prototyping a new "
"feature, it may be convenient to initially implement the code using "
"dynamic typing and only add type hints later once the code is more "
"stable."
msgstr ""

#: ../../source/getting_started.rst:104
msgid ""
"Once you are finished migrating or prototyping your code, you can make "
"mypy warn you if you add a dynamic function by mistake by using the "
":option:`--disallow-untyped-defs <mypy --disallow-untyped-defs>` flag. "
"See :ref:`command-line` for more information on configuring mypy."
msgstr ""

#: ../../source/getting_started.rst:110
msgid ""
"The earlier stages of analysis performed by mypy may report errors even "
"for dynamically typed functions. However, you should not rely on this, as"
" this may change in the future."
msgstr ""

#: ../../source/getting_started.rst:115
msgid "More function signatures"
msgstr ""

#: ../../source/getting_started.rst:117
msgid "Here are a few more examples of adding type hints to function signatures."
msgstr ""

#: ../../source/getting_started.rst:119
msgid ""
"If a function does not explicitly return a value, give it a return type "
"of ``None``. Using a ``None`` result in a statically typed context "
"results in a type check error:"
msgstr ""

#: ../../source/getting_started.rst:130
msgid ""
"Make sure to remember to include ``None``: if you don't, the function "
"will be dynamically typed. For example:"
msgstr ""

#: ../../source/getting_started.rst:141
msgid "Arguments with default values can be annotated like so:"
msgstr ""

#: ../../source/getting_started.rst:151
msgid "``*args`` and ``**kwargs`` arguments can be annotated like so:"
msgstr ""

#: ../../source/getting_started.rst:164
msgid "Additional types, and the typing module"
msgstr ""

#: ../../source/getting_started.rst:166
msgid ""
"So far, we've added type hints that use only basic concrete types like "
"``str`` and ``float``. What if we want to express more complex types, "
"such as \"a list of strings\" or \"an iterable of ints\"?"
msgstr ""

#: ../../source/getting_started.rst:170
msgid ""
"For example, to indicate that some function can accept a list of strings,"
" use the ``list[str]`` type (Python 3.9 and later):"
msgstr ""

#: ../../source/getting_started.rst:185
msgid ""
"The :py:class:`list` type is an example of something called a *generic "
"type*: it can accept one or more *type parameters*. In this case, we "
"*parameterized* :py:class:`list` by writing ``list[str]``. This lets mypy"
" know that ``greet_all`` accepts specifically lists containing strings, "
"and not lists containing ints or any other type."
msgstr ""

#: ../../source/getting_started.rst:190
msgid ""
"In Python 3.8 and earlier, you can instead import the "
":py:class:`~typing.List` type from the :py:mod:`typing` module:"
msgstr ""

#: ../../source/getting_started.rst:203
msgid ""
"You can find many of these more complex static types in the "
":py:mod:`typing` module."
msgstr ""

#: ../../source/getting_started.rst:205
msgid ""
"In the above examples, the type signature is perhaps a little too rigid. "
"After all, there's no reason why this function must accept *specifically*"
" a list -- it would run just fine if you were to pass in a tuple, a set, "
"or any other custom iterable."
msgstr ""

#: ../../source/getting_started.rst:209
msgid ""
"You can express this idea using the :py:class:`collections.abc.Iterable` "
"(or :py:class:`typing.Iterable` in Python 3.8 and earlier) type instead "
"of :py:class:`list` :"
msgstr ""

#: ../../source/getting_started.rst:221
msgid ""
"As another example, suppose you want to write a function that can accept "
"*either* ints or strings, but no other types. You can express this using "
"the :py:data:`~typing.Union` type:"
msgstr ""

#: ../../source/getting_started.rst:234
msgid ""
"Similarly, suppose that you want the function to accept only strings or "
"``None``. You can again use :py:data:`~typing.Union` and use ``Union[str,"
" None]`` -- or alternatively, use the type ``Optional[str]``. These two "
"types are identical and interchangeable: ``Optional[str]`` is just a "
"shorthand or *alias* for ``Union[str, None]``. It exists mostly as a "
"convenience to help function signatures look a little cleaner:"
msgstr ""

#: ../../source/getting_started.rst:250
msgid ""
"The :py:mod:`typing` module contains many other useful types. You can "
"find a quick overview by looking through the :ref:`mypy cheatsheets "
"<overview-cheat-sheets>` and a more detailed overview (including "
"information on how to make your own generic types or your own type "
"aliases) by looking through the :ref:`type system reference <overview-"
"type-system-reference>`."
msgstr ""

#: ../../source/getting_started.rst:258
msgid ""
"When adding types, the convention is to import types using the form "
"``from typing import Union`` (as opposed to doing just ``import typing`` "
"or ``import typing as t`` or ``from typing import *``)."
msgstr ""

#: ../../source/getting_started.rst:262
msgid ""
"For brevity, we often omit imports from :py:mod:`typing` or "
":py:mod:`collections.abc` in code examples, but mypy will give an error "
"if you use types such as :py:class:`~typing.Iterable` without first "
"importing them."
msgstr ""

#: ../../source/getting_started.rst:268
msgid ""
"In some examples we use capitalized variants of types, such as ``List``, "
"and sometimes we use plain ``list``. They are equivalent, but the prior "
"variant is needed if you are using Python 3.8 or earlier."
msgstr ""

#: ../../source/getting_started.rst:273
msgid "Local type inference"
msgstr ""

#: ../../source/getting_started.rst:275
msgid ""
"Once you have added type hints to a function (i.e. made it statically "
"typed), mypy will automatically type check that function's body. While "
"doing so, mypy will try and *infer* as many details as possible."
msgstr ""

#: ../../source/getting_started.rst:279
msgid ""
"We saw an example of this in the ``normalize_id`` function above -- mypy "
"understands basic :py:func:`isinstance <isinstance>` checks and so can "
"infer that the ``user_id`` variable was of type ``int`` in the if-branch "
"and of type ``str`` in the else-branch. Similarly, mypy was able to "
"understand that ``name`` could not possibly be ``None`` in the "
"``greeting`` function above, based both on the ``name is None`` check and"
" the variable assignment in that if statement."
msgstr ""

#: ../../source/getting_started.rst:286
msgid ""
"As another example, consider the following function. Mypy can type check "
"this function without a problem: it will use the available context and "
"deduce that ``output`` must be of type ``list[float]`` and that ``num`` "
"must be of type ``float``:"
msgstr ""

#: ../../source/getting_started.rst:299
msgid ""
"Mypy will warn you if it is unable to determine the type of some variable"
" -- for example, when assigning an empty dictionary to some global value:"
msgstr ""

#: ../../source/getting_started.rst:306
msgid ""
"You can teach mypy what type ``my_global_dict`` is meant to have by "
"giving it a type hint. For example, if you knew this variable is supposed"
" to be a dict of ints to floats, you could annotate it using either "
"variable annotations (introduced in Python 3.6 by :pep:`526`) or using a "
"comment-based syntax like so:"
msgstr ""

#: ../../source/getting_started.rst:326
msgid "Library stubs and typeshed"
msgstr ""

#: ../../source/getting_started.rst:328
msgid ""
"Mypy uses library *stubs* to type check code interacting with library "
"modules, including the Python standard library. A library stub defines a "
"skeleton of the public interface of the library, including classes, "
"variables and functions, and their types. Mypy ships with stubs for the "
"standard library from the `typeshed "
"<https://github.com/python/typeshed>`_ project, which contains library "
"stubs for the Python builtins, the standard library, and selected third-"
"party packages."
msgstr ""

#: ../../source/getting_started.rst:337
msgid "For example, consider this code:"
msgstr ""

#: ../../source/getting_started.rst:343
msgid ""
"Without a library stub, mypy would have no way of inferring the type of "
"``x`` and checking that the argument to :py:func:`chr` has a valid type."
msgstr ""

#: ../../source/getting_started.rst:346
msgid ""
"Mypy complains if it can't find a stub (or a real module) for a library "
"module that you import. Some modules ship with stubs or inline "
"annotations that mypy can automatically find, or you can install "
"additional stubs using pip (see :ref:`fix-missing-imports` and :ref"
":`installed-packages` for the details). For example, you can install the "
"stubs for the ``requests`` package like this:"
msgstr ""

#: ../../source/getting_started.rst:357
msgid ""
"The stubs are usually packaged in a distribution named "
"``types-<distribution>``.  Note that the distribution name may be "
"different from the name of the package that you import. For example, "
"``types-PyYAML`` contains stubs for the ``yaml`` package. Mypy can often "
"suggest the name of the stub distribution:"
msgstr ""

#: ../../source/getting_started.rst:371
msgid ""
"Starting in mypy 0.900, most third-party package stubs must be installed "
"explicitly. This decouples mypy and stub versioning, allowing stubs to "
"updated without updating mypy. This also allows stubs not originally "
"included with mypy to be installed. Earlier mypy versions included a "
"fixed set of stubs for third-party packages."
msgstr ""

#: ../../source/getting_started.rst:378
msgid ""
"You can also :ref:`create stubs <stub-files>` easily. We discuss ways of "
"silencing complaints about missing stubs in :ref:`ignore-missing-"
"imports`."
msgstr ""

#: ../../source/getting_started.rst:383
msgid "Configuring mypy"
msgstr ""

#: ../../source/getting_started.rst:385
msgid ""
"Mypy supports many command line options that you can use to tweak how "
"mypy behaves: see :ref:`command-line` for more details."
msgstr ""

#: ../../source/getting_started.rst:388
msgid ""
"For example, suppose you want to make sure *all* functions within your "
"codebase are using static typing and make mypy report an error if you add"
" a dynamically-typed function by mistake. You can make mypy do this by "
"running mypy with the :option:`--disallow-untyped-defs <mypy --disallow-"
"untyped-defs>` flag."
msgstr ""

#: ../../source/getting_started.rst:393
msgid ""
"Another potentially useful flag is :option:`--strict <mypy --strict>`, "
"which enables many (though not all) of the available strictness options "
"-- including :option:`--disallow-untyped-defs <mypy --disallow-untyped-"
"defs>`."
msgstr ""

#: ../../source/getting_started.rst:397
msgid ""
"This flag is mostly useful if you're starting a new project from scratch "
"and want to maintain a high degree of type safety from day one. However, "
"this flag will probably be too aggressive if you either plan on using "
"many untyped third party libraries or are trying to add static types to a"
" large, existing codebase. See :ref:`existing-code` for more suggestions "
"on how to handle the latter case."
msgstr ""

#: ../../source/getting_started.rst:405
msgid "Next steps"
msgstr ""

#: ../../source/getting_started.rst:407
msgid ""
"If you are in a hurry and don't want to read lots of documentation before"
" getting started, here are some pointers to quick learning resources:"
msgstr ""

#: ../../source/getting_started.rst:411
msgid ""
"Read the :ref:`mypy cheatsheet <cheat-sheet-py3>` (also for :ref:`Python "
"2 <cheat-sheet-py2>`)."
msgstr ""

#: ../../source/getting_started.rst:414
msgid ""
"Read :ref:`existing-code` if you have a significant existing codebase "
"without many type annotations."
msgstr ""

#: ../../source/getting_started.rst:417
msgid ""
"Read the `blog post <https://blog.zulip.org/2016/10/13/static-types-in-"
"python-oh-mypy/>`_ about the Zulip project's experiences with adopting "
"mypy."
msgstr ""

#: ../../source/getting_started.rst:420
msgid "If you prefer watching talks instead of reading, here are some ideas:"
msgstr ""

#: ../../source/getting_started.rst:423
msgid ""
"Carl Meyer: `Type Checked Python in the Real World "
"<https://www.youtube.com/watch?v=pMgmKJyWKn8>`_ (PyCon 2018)"
msgstr ""

#: ../../source/getting_started.rst:427
msgid ""
"Greg Price: `Clearer Code at Scale: Static Types at Zulip and Dropbox "
"<https://www.youtube.com/watch?v=0c46YHS3RY8>`_ (PyCon 2018)"
msgstr ""

#: ../../source/getting_started.rst:431
msgid ""
"Look at :ref:`solutions to common issues <common_issues>` with mypy if "
"you encounter problems."
msgstr ""

#: ../../source/getting_started.rst:434
msgid ""
"You can ask questions about mypy in the `mypy issue tracker "
"<https://github.com/python/mypy/issues>`_ and typing `Gitter chat "
"<https://gitter.im/python/typing>`_."
msgstr ""

#: ../../source/getting_started.rst:438
msgid ""
"You can also continue reading this document and skip sections that aren't"
" relevant for you. You don't need to read sections in order."
msgstr ""

