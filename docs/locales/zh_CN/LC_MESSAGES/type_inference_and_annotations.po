# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Jukka Lehtosalo
# This file is distributed under the same license as the Mypy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mypy "
"0.940+dev.ff5f71d674aece3095b7a623cc910e48c5a01c1e.dirty\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-04 14:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/type_inference_and_annotations.rst:2
msgid "Type inference and type annotations"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:5
msgid "Type inference"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:7
msgid ""
"Mypy considers the initial assignment as the definition of a variable. If"
" you do not explicitly specify the type of the variable, mypy infers the "
"type based on the static type of the value expression:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:17
msgid ""
"Type inference is not used in dynamically typed functions (those without "
"a function type annotation) â€” every local variable type defaults to "
"``Any`` in such functions. ``Any`` is discussed later in more detail."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:24
msgid "Explicit types for variables"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:26
msgid ""
"You can override the inferred type of a variable by using a variable type"
" annotation:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:35
msgid ""
"Without the type annotation, the type of ``x`` would be just ``int``. We "
"use an annotation to give it a more general type ``Union[int, str]`` "
"(this type means that the value can be either an ``int`` or a ``str``). "
"Mypy checks that the type of the initializer is compatible with the "
"declared type. The following example is not valid, since the initializer "
"is a floating point number, and this is incompatible with the declared "
"type:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:47
msgid ""
"The variable annotation syntax is available starting from Python 3.6. In "
"earlier Python versions, you can use a special comment after an "
"assignment statement to declare the type of a variable:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:55
msgid ""
"We'll use both syntax variants in examples. The syntax variants are "
"mostly interchangeable, but the variable annotation syntax allows "
"defining the type of a variable without initialization, which is not "
"possible with the comment syntax:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:66
msgid ""
"The best way to think about this is that the type annotation sets the "
"type of the variable, not the type of the expression. To force the type "
"of an expression you can use :py:func:`cast(\\<type\\>, \\<expression\\>)"
" <typing.cast>`."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:71
msgid "Explicit types for collections"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:73
msgid ""
"The type checker cannot always infer the type of a list or a dictionary. "
"This often arises when creating an empty list or dictionary and assigning"
" it to a new variable that doesn't have an explicit variable type. Here "
"is an example where mypy can't infer the type without some help:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:83
msgid "In these cases you can give the type explicitly using a type annotation:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:90
msgid "Similarly, you can also give an explicit type when creating an empty set:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:98
msgid ""
"Using type arguments (e.g. ``list[int]``) on builtin collections like "
":py:class:`list`,  :py:class:`dict`, :py:class:`tuple`, and  "
":py:class:`set` only works in Python 3.9 and later. For Python 3.8 and "
"earlier, you must use :py:class:`~typing.List` (e.g. ``List[int]``), "
":py:class:`~typing.Dict`, and so on."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:106
msgid "Compatibility of container types"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:108
msgid ""
"The following program generates a mypy error, since ``list[int]`` is not "
"compatible with ``list[object]``:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:116
msgid ""
"The reason why the above assignment is disallowed is that allowing the "
"assignment could result in non-int values stored in a list of ``int``:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:126
msgid ""
"Other container types like :py:class:`dict` and :py:class:`set` behave "
"similarly. We will discuss how you can work around this in "
":ref:`variance`."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:129
msgid ""
"You can still run the above program; it prints ``x``. This illustrates "
"the fact that static types are used during type checking, but they do not"
" affect the runtime behavior of programs. You can run programs with type "
"check failures, which is often very handy when performing a large "
"refactoring. Thus you can always 'work around' the type system, and it "
"doesn't really limit what you can do in your program."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:137
msgid "Context in type inference"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:139
msgid ""
"Type inference is *bidirectional* and takes context into account. For "
"example, the following is valid:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:147
msgid ""
"In an assignment, the type context is determined by the assignment "
"target. In this case this is ``l``, which has the type ``list[object]``. "
"The value expression ``[1, 2]`` is type checked in this context and given"
" the type ``list[object]``. In the previous example we introduced a new "
"variable ``l``, and here the type context was empty."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:154
msgid ""
"Declared argument types are also used for type context. In this program "
"mypy knows that the empty list ``[]`` should have type ``list[int]`` "
"based on the declared type of ``arg`` in ``foo``:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:165
msgid ""
"However, context only works within a single statement. Here mypy requires"
" an annotation for the empty list, since the context would only be "
"available in the following statement:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:177
msgid "Working around the issue is easy by adding a type annotation:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:186
msgid "Declaring multiple variable types at a time"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:188
msgid ""
"You can declare more than a single variable at a time, but only with a "
"type comment. In order to nicely work with multiple assignment, you must "
"give each variable a type separately:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:196
msgid ""
"You can optionally use parentheses around the types, assignment targets "
"and assigned expression:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:207
msgid "Starred expressions"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:209
msgid ""
"In most cases, mypy can infer the type of starred expressions from the "
"right-hand side of an assignment, but not always:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:217
msgid ""
"On first line, the type of ``bs`` is inferred to be ``list[int]``. "
"However, on the second line, mypy cannot infer the type of ``rs``, "
"because there is no right-hand side value for ``rs`` to infer the type "
"from. In cases like these, the starred expression needs to be annotated "
"with a starred type:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:227
msgid "Here, the type of ``rs`` is set to ``list[int]``."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:230
msgid "Silencing type errors"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:232
msgid ""
"You might want to disable type checking on specific lines, or within "
"specific files in your codebase. To do that, you can use a ``# type: "
"ignore`` comment."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:235
msgid ""
"For example, say that the web framework that you use now takes an integer"
" argument to ``run()``, which starts it on localhost on that port. Like "
"so:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:243
msgid ""
"However, the type stubs that the package uses is not up-to-date, and it "
"still expects only ``str`` types for ``run()``. This would give you the "
"following error:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:250
msgid ""
"If you cannot directly fix the type stubs yourself, you can temporarily "
"disable type checking on that line, by adding a ``# type: ignore``:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:258
msgid ""
"This will suppress any mypy errors that would have raised on that "
"specific line."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:260
msgid ""
"You should probably add some more information on the ``# type: ignore`` "
"comment, to explain why the ignore was added in the first place. This "
"could be a link to an issue on the repository responsible for the type "
"stubs, or it could be a short explanation of the bug. To do that, use "
"this format:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:271
msgid ""
"Mypy displays an error code for each error if you use :option:`--show-"
"error-codes <mypy --show-error-codes>`:"
msgstr ""

#: ../../source/type_inference_and_annotations.rst:279
msgid ""
"It is possible to add a specific error-code in your ignore comment (e.g. "
"``# type: ignore[attr-defined]``) to clarify what's being silenced. You "
"can find more information about error codes :ref:`here <silence-error-"
"codes>`."
msgstr ""

#: ../../source/type_inference_and_annotations.rst:283
msgid ""
"Similarly, you can also ignore all mypy checks in a file, by adding a ``#"
" type: ignore`` at the top of the file:"
msgstr ""

