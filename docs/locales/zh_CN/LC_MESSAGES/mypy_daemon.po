# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Jukka Lehtosalo
# This file is distributed under the same license as the Mypy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mypy "
"0.940+dev.ff5f71d674aece3095b7a623cc910e48c5a01c1e.dirty\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-04 14:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/mypy_daemon.rst:6
msgid "Mypy daemon (mypy server)"
msgstr ""

#: ../../source/mypy_daemon.rst:8
msgid ""
"Instead of running mypy as a command-line tool, you can also run it as a "
"long-running daemon (server) process and use a command-line client to "
"send type-checking requests to the server.  This way mypy can perform "
"type checking much faster, since program state cached from previous runs "
"is kept in memory and doesn't have to be read from the file system on "
"each run. The server also uses finer-grained dependency tracking to "
"reduce the amount of work that needs to be done."
msgstr ""

#: ../../source/mypy_daemon.rst:16
msgid ""
"If you have a large codebase to check, running mypy using the mypy daemon"
" can be *10 or more times faster* than the regular command-line ``mypy`` "
"tool, especially if your workflow involves running mypy repeatedly after "
"small edits -- which is often a good idea, as this way you'll find errors"
" sooner."
msgstr ""

#: ../../source/mypy_daemon.rst:24
msgid ""
"The command-line interface of mypy daemon may change in future mypy "
"releases."
msgstr ""

#: ../../source/mypy_daemon.rst:29
msgid ""
"Each mypy daemon process supports one user and one set of source files, "
"and it can only process one type checking request at a time. You can run "
"multiple mypy daemon processes to type check multiple repositories."
msgstr ""

#: ../../source/mypy_daemon.rst:35
msgid "Basic usage"
msgstr ""

#: ../../source/mypy_daemon.rst:37
msgid ""
"The client utility ``dmypy`` is used to control the mypy daemon. Use "
"``dmypy run -- <flags> <files>`` to type check a set of files (or "
"directories). This will launch the daemon if it is not running. You can "
"use almost arbitrary mypy flags after ``--``.  The daemon will always run"
" on the current host. Example::"
msgstr ""

#: ../../source/mypy_daemon.rst:45
msgid ""
"``dmypy run`` will automatically restart the daemon if the configuration "
"or mypy version changes."
msgstr ""

#: ../../source/mypy_daemon.rst:48
msgid ""
"The initial run will process all the code and may take a while to finish,"
" but subsequent runs will be quick, especially if you've only changed a "
"few files. (You can use :ref:`remote caching <remote-cache>` to speed up "
"the initial run. The speedup can be significant if you have a large "
"codebase.)"
msgstr ""

#: ../../source/mypy_daemon.rst:56
msgid ""
"Mypy 0.780 added support for following imports in dmypy (enabled by "
"default). This functionality is still experimental. You can use "
"``--follow-imports=skip`` or ``--follow-imports=error`` to fall back to "
"the stable functionality.  See :ref:`follow-imports` for details on how "
"these work."
msgstr ""

#: ../../source/mypy_daemon.rst:63
msgid "Daemon client commands"
msgstr ""

#: ../../source/mypy_daemon.rst:65
msgid ""
"While ``dmypy run`` is sufficient for most uses, some workflows (ones "
"using :ref:`remote caching <remote-cache>`, perhaps), require more "
"precise control over the lifetime of the daemon process:"
msgstr ""

#: ../../source/mypy_daemon.rst:69
msgid "``dmypy stop`` stops the daemon."
msgstr ""

#: ../../source/mypy_daemon.rst:71
msgid ""
"``dmypy start -- <flags>`` starts the daemon but does not check any "
"files. You can use almost arbitrary mypy flags after ``--``."
msgstr ""

#: ../../source/mypy_daemon.rst:74
msgid ""
"``dmypy restart -- <flags>`` restarts the daemon. The flags are the same "
"as with ``dmypy start``. This is equivalent to a stop command followed by"
" a start."
msgstr ""

#: ../../source/mypy_daemon.rst:78
msgid ""
"Use ``dmypy run --timeout SECONDS -- <flags>`` (or ``start`` or "
"``restart``) to automatically shut down the daemon after inactivity. By "
"default, the daemon runs until it's explicitly stopped."
msgstr ""

#: ../../source/mypy_daemon.rst:83
msgid ""
"``dmypy check <files>`` checks a set of files using an already running "
"daemon."
msgstr ""

#: ../../source/mypy_daemon.rst:86
msgid ""
"``dmypy recheck`` checks the same set of files as the most recent "
"``check`` or ``recheck`` command. (You can also use the "
":option:`--update` and :option:`--remove` options to alter the set of "
"files, and to define which files should be processed.)"
msgstr ""

#: ../../source/mypy_daemon.rst:91
msgid ""
"``dmypy status`` checks whether a daemon is running. It prints a "
"diagnostic and exits with ``0`` if there is a running daemon."
msgstr ""

#: ../../source/mypy_daemon.rst:94
msgid ""
"Use ``dmypy --help`` for help on additional commands and command-line "
"options not discussed here, and ``dmypy <command> --help`` for help on "
"command-specific options."
msgstr ""

#: ../../source/mypy_daemon.rst:99
msgid "Additional daemon flags"
msgstr ""

#: ../../source/mypy_daemon.rst:103
msgid ""
"Use ``FILE`` as the status file for storing daemon runtime state. This is"
" normally a JSON file that contains information about daemon process and "
"connection. The default path is ``.dmypy.json`` in the current working "
"directory."
msgstr ""

#: ../../source/mypy_daemon.rst:110
msgid ""
"Direct daemon stdout/stderr to ``FILE``. This is useful for debugging "
"daemon crashes, since the server traceback is not always printed by the "
"client. This is available for the ``start``, ``restart``, and ``run`` "
"commands."
msgstr ""

#: ../../source/mypy_daemon.rst:116
msgid ""
"Automatically shut down server after ``TIMEOUT`` seconds of inactivity. "
"This is available for the ``start``, ``restart``, and ``run`` commands."
msgstr ""

#: ../../source/mypy_daemon.rst:121
msgid ""
"Re-check ``FILE``, or add it to the set of files being checked (and check"
" it). This option may be repeated, and it's only available for the "
"``recheck`` command.  By default, mypy finds and checks all files changed"
" since the previous run and files that depend on them.  However, if you "
"use this option (and/or :option:`--remove`), mypy assumes that only the "
"explicitly specified files have changed. This is only useful to speed up "
"mypy if you type check a very large number of files, and use an external,"
" fast file system watcher, such as `watchman`_ or `watchdog`_, to "
"determine which files got edited or deleted. *Note:* This option is never"
" required and is only available for performance tuning."
msgstr ""

#: ../../source/mypy_daemon.rst:135
msgid ""
"Remove ``FILE`` from the set of files being checked. This option may be "
"repeated. This is only available for the ``recheck`` command. See "
":option:`--update` above for when this may be useful. *Note:* This option"
" is never required and is only available for performance tuning."
msgstr ""

#: ../../source/mypy_daemon.rst:143
msgid ""
"Collect information about the current internal file state. This is only "
"available for the ``status`` command. This will dump JSON to ``FILE`` in "
"the format ``{path: [modification_time, size, content_hash]}``. This is "
"useful for debugging the built-in file system watcher. *Note:* This is an"
" internal flag and the format may change."
msgstr ""

#: ../../source/mypy_daemon.rst:152
msgid ""
"Write performance profiling information to ``FILE``. This is only "
"available for the ``check``, ``recheck``, and ``run`` commands."
msgstr ""

#: ../../source/mypy_daemon.rst:156
msgid "Static inference of annotations"
msgstr ""

#: ../../source/mypy_daemon.rst:158
msgid ""
"The mypy daemon supports (as an experimental feature) statically "
"inferring draft function and method type annotations. Use ``dmypy suggest"
" FUNCTION`` to generate a draft signature in the format ``(param_type_1, "
"param_type_2, ...) -> ret_type`` (types are included for all arguments, "
"including keyword-only arguments, ``*args`` and ``**kwargs``)."
msgstr ""

#: ../../source/mypy_daemon.rst:164
msgid ""
"This is a low-level feature intended to be used by editor integrations, "
"IDEs, and other tools (for example, the `mypy plugin for PyCharm`_), to "
"automatically add annotations to source files, or to propose function "
"signatures."
msgstr ""

#: ../../source/mypy_daemon.rst:169
msgid "In this example, the function ``format_id()`` has no annotation:"
msgstr ""

#: ../../source/mypy_daemon.rst:178
msgid ""
"``dmypy suggest`` uses call sites, return statements, and other "
"heuristics (such as looking for signatures in base classes) to infer that"
" ``format_id()`` accepts an ``int`` argument and returns a ``str``. Use "
"``dmypy suggest module.format_id`` to print the suggested signature for "
"the function."
msgstr ""

#: ../../source/mypy_daemon.rst:183
msgid "More generally, the target function may be specified in two ways:"
msgstr ""

#: ../../source/mypy_daemon.rst:185
msgid "By its fully qualified name, i.e. ``[package.]module.[class.]function``."
msgstr ""

#: ../../source/mypy_daemon.rst:187
msgid ""
"By its location in a source file, i.e. ``/path/to/file.py:line``. The "
"path can be absolute or relative, and ``line`` can refer to any line "
"number within the function body."
msgstr ""

#: ../../source/mypy_daemon.rst:191
msgid ""
"This command can also be used to find a more precise alternative for an "
"existing, imprecise annotation with some ``Any`` types."
msgstr ""

#: ../../source/mypy_daemon.rst:194
msgid ""
"The following flags customize various aspects of the ``dmypy suggest`` "
"command."
msgstr ""

#: ../../source/mypy_daemon.rst:199
msgid ""
"Output the signature as JSON, so that `PyAnnotate`_ can read it and add "
"the signature to the source file. Here is what the JSON looks like:"
msgstr ""

#: ../../source/mypy_daemon.rst:212
msgid ""
"Only produce suggestions that cause no errors in the checked code. By "
"default, mypy will try to find the most precise type, even if it causes "
"some type errors."
msgstr ""

#: ../../source/mypy_daemon.rst:217
msgid ""
"Only produce suggestions that don't contain ``Any`` types. By default "
"mypy proposes the most precise signature found, even if it contains "
"``Any`` types."
msgstr ""

#: ../../source/mypy_daemon.rst:222
msgid ""
"Only allow some fraction of types in the suggested signature to be "
"``Any`` types. The fraction ranges from ``0`` (same as ``--no-any``) to "
"``1``."
msgstr ""

#: ../../source/mypy_daemon.rst:227
msgid ""
"Try also using ``unicode`` wherever ``str`` is inferred. This flag may be"
" useful for annotating Python 2/3 straddling code."
msgstr ""

#: ../../source/mypy_daemon.rst:232
msgid ""
"Only find call sites for a given function instead of suggesting a type. "
"This will produce a list with line numbers and types of actual arguments "
"for each call: ``/path/to/file.py:line: (arg_type_1, arg_type_2, ...)``."
msgstr ""

#: ../../source/mypy_daemon.rst:238
msgid ""
"Use a dummy name instead of plain ``Any`` for types that cannot be "
"inferred. This may be useful to emphasize to a user that a given type "
"couldn't be inferred and needs to be entered manually."
msgstr ""

#: ../../source/mypy_daemon.rst:244
msgid "Set the maximum number of types to try for a function (default: ``64``)."
msgstr ""

