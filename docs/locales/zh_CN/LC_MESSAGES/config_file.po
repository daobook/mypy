# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Jukka Lehtosalo
# This file is distributed under the same license as the Mypy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mypy "
"0.940+dev.ff5f71d674aece3095b7a623cc910e48c5a01c1e.dirty\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-04 14:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/config_file.rst:4
msgid "The mypy configuration file"
msgstr ""

#: ../../source/config_file.rst:6
msgid ""
"Mypy supports reading configuration settings from a file.  By default it "
"uses the file ``mypy.ini`` with a fallback to ``.mypy.ini``, then "
"``pyproject.toml``, then ``setup.cfg`` in the current directory, then "
"``$XDG_CONFIG_HOME/mypy/config``, then ``~/.config/mypy/config``, and "
"finally ``.mypy.ini`` in the user home directory if none of them are "
"found; the :option:`--config-file <mypy --config-file>` command-line flag"
" can be used to read a different file instead (see :ref:`config-file-"
"flag`)."
msgstr ""

#: ../../source/config_file.rst:13
msgid ""
"It is important to understand that there is no merging of configuration "
"files, as it would lead to ambiguity.  The :option:`--config-file <mypy "
"--config-file>` flag has the highest precedence and must be correct; "
"otherwise mypy will report an error and exit.  Without command line "
"option, mypy will look for configuration files in the above mentioned "
"order."
msgstr ""

#: ../../source/config_file.rst:18
msgid ""
"Most flags correspond closely to :ref:`command-line flags <command-line>`"
" but there are some differences in flag names and some flags may take a "
"different value based on the module being processed."
msgstr ""

#: ../../source/config_file.rst:22
msgid ""
"Some flags support user home directory and environment variable "
"expansion. To refer to the user home directory, use ``~`` at the "
"beginning of the path. To expand environment variables use ``$VARNAME`` "
"or ``${VARNAME}``."
msgstr ""

#: ../../source/config_file.rst:28
msgid "Config file format"
msgstr ""

#: ../../source/config_file.rst:30
msgid ""
"The configuration file format is the usual :doc:`ini file "
"<python:library/configparser>` format. It should contain section names in"
" square brackets and flag settings of the form `NAME = VALUE`. Comments "
"start with ``#`` characters."
msgstr ""

#: ../../source/config_file.rst:35
msgid ""
"A section named ``[mypy]`` must be present.  This specifies the global "
"flags."
msgstr ""

#: ../../source/config_file.rst:38
msgid ""
"Additional sections named ``[mypy-PATTERN1,PATTERN2,...]`` may be "
"present, where ``PATTERN1``, ``PATTERN2``, etc., are comma-separated "
"patterns of fully-qualified module names, with some components optionally"
" replaced by the '*' character (e.g. ``foo.bar``, ``foo.bar.*``, "
"``foo.*.baz``). These sections specify additional flags that only apply "
"to *modules* whose name matches at least one of the patterns."
msgstr ""

#: ../../source/config_file.rst:45
msgid ""
"A pattern of the form ``qualified_module_name`` matches only the named "
"module, while ``dotted_module_name.*`` matches ``dotted_module_name`` and"
" any submodules (so ``foo.bar.*`` would match all of ``foo.bar``, "
"``foo.bar.baz``, and ``foo.bar.baz.quux``)."
msgstr ""

#: ../../source/config_file.rst:50
msgid ""
"Patterns may also be \"unstructured\" wildcards, in which stars may "
"appear in the middle of a name (e.g ``site.*.migrations.*``). Stars match"
" zero or more module components (so ``site.*.migrations.*`` can match "
"``site.migrations``)."
msgstr ""

#: ../../source/config_file.rst:57
msgid "When options conflict, the precedence order for configuration is:"
msgstr ""

#: ../../source/config_file.rst:59
msgid ":ref:`Inline configuration <inline-config>` in the source file"
msgstr ""

#: ../../source/config_file.rst:60
msgid "Sections with concrete module names (``foo.bar``)"
msgstr ""

#: ../../source/config_file.rst:61
msgid ""
"Sections with \"unstructured\" wildcard patterns (``foo.*.baz``), with "
"sections later in the configuration file overriding sections earlier."
msgstr ""

#: ../../source/config_file.rst:64
msgid ""
"Sections with \"well-structured\" wildcard patterns (``foo.bar.*``), with"
" more specific overriding more general."
msgstr ""

#: ../../source/config_file.rst:66
msgid "Command line options."
msgstr ""

#: ../../source/config_file.rst:67
msgid "Top-level configuration file options."
msgstr ""

#: ../../source/config_file.rst:69
msgid ""
"The difference in precedence order between \"structured\" patterns (by "
"specificity) and \"unstructured\" patterns (by order in the file) is "
"unfortunate, and is subject to change in future versions."
msgstr ""

#: ../../source/config_file.rst:75
msgid ""
"The :confval:`warn_unused_configs` flag may be useful to debug misspelled"
" section names."
msgstr ""

#: ../../source/config_file.rst:80
msgid "Configuration flags are liable to change between releases."
msgstr ""

#: ../../source/config_file.rst:84
msgid "Per-module and global options"
msgstr ""

#: ../../source/config_file.rst:86
msgid ""
"Some of the config options may be set either globally (in the ``[mypy]`` "
"section) or on a per-module basis (in sections like ``[mypy-foo.bar]``)."
msgstr ""

#: ../../source/config_file.rst:89
msgid ""
"If you set an option both globally and for a specific module, the module "
"configuration options take precedence. This lets you set global defaults "
"and override them on a module-by-module basis. If multiple pattern "
"sections match a module, :ref:`the options from the most specific section"
" are used where they disagree <config-precedence>`."
msgstr ""

#: ../../source/config_file.rst:94
msgid ""
"Some other options, as specified in their description, may only be set in"
" the global section (``[mypy]``)."
msgstr ""

#: ../../source/config_file.rst:99
msgid "Inverting option values"
msgstr ""

#: ../../source/config_file.rst:101
msgid ""
"Options that take a boolean value may be inverted by adding ``no_`` to "
"their name or by (when applicable) swapping their prefix from "
"``disallow`` to ``allow`` (and vice versa)."
msgstr ""

#: ../../source/config_file.rst:107
msgid "Examples"
msgstr ""

#: ../../source/config_file.rst:109
msgid ""
"Here is an example of a ``mypy.ini`` file. To use this config file, place"
" it at the root of your repo and run mypy."
msgstr ""

#: ../../source/config_file.rst:132
msgid ""
"This config file specifies three global options in the ``[mypy]`` "
"section. These three options will:"
msgstr ""

#: ../../source/config_file.rst:135
msgid ""
"Type-check your entire project assuming it will be run using Python 2.7. "
"(This is equivalent to using the :option:`--python-version 2.7 <mypy "
"--python-version>` or :option:`-2 <mypy -2>` flag)."
msgstr ""

#: ../../source/config_file.rst:138
msgid ""
"Report an error whenever a function returns a value that is inferred to "
"have type ``Any``."
msgstr ""

#: ../../source/config_file.rst:141
msgid ""
"Report any config options that are unused by mypy. (This will help us "
"catch typos when making changes to our config file)."
msgstr ""

#: ../../source/config_file.rst:144
msgid ""
"Next, this module specifies three per-module options. The first two "
"options change how mypy type checks code in ``mycode.foo.*`` and "
"``mycode.bar``, which we assume here are two modules that you wrote. The "
"final config option changes how mypy type checks ``somelibrary``, which "
"we assume here is some 3rd party library you've installed and are "
"importing. These options will:"
msgstr ""

#: ../../source/config_file.rst:149
msgid ""
"Selectively disallow untyped function definitions only within the "
"``mycode.foo`` package -- that is, only for function definitions defined "
"in the ``mycode/foo`` directory."
msgstr ""

#: ../../source/config_file.rst:153
msgid ""
"Selectively *disable* the \"function is returning any\" warnings within "
"``mycode.bar`` only. This overrides the global default we set earlier."
msgstr ""

#: ../../source/config_file.rst:156
msgid ""
"Suppress any error messages generated when your codebase tries importing "
"the module ``somelibrary``. This is useful if ``somelibrary`` is some 3rd"
" party library missing type hints."
msgstr ""

#: ../../source/config_file.rst:164
msgid "Import discovery"
msgstr ""

#: ../../source/config_file.rst:166
msgid ""
"For more information, see the :ref:`Import discovery <import-discovery>` "
"section of the command line docs."
msgstr ""

#: ../../source/config_file.rst
msgid "Type"
msgstr ""

#: ../../source/config_file.rst:171 ../../source/config_file.rst:294
#: ../../source/config_file.rst:334 ../../source/config_file.rst:371
#: ../../source/config_file.rst:382 ../../source/config_file.rst:765
#: ../../source/config_file.rst:842 ../../source/config_file.rst:848
#: ../../source/config_file.rst:871 ../../source/config_file.rst:878
#: ../../source/config_file.rst:888 ../../source/config_file.rst:898
#: ../../source/config_file.rst:905 ../../source/config_file.rst:913
#: ../../source/config_file.rst:920 ../../source/config_file.rst:930
#: ../../source/config_file.rst:946
msgid "string"
msgstr ""

#: ../../source/config_file.rst:173
msgid ""
"Specifies the paths to use, after trying the paths from ``MYPYPATH`` "
"environment variable.  Useful if you'd like to keep stubs in your repo, "
"along with the config file. Multiple paths are always separated with a "
"``:`` or ``,`` regardless of the platform. User home directory and "
"environment variables will be expanded."
msgstr ""

#: ../../source/config_file.rst:178
msgid ""
"Relative paths are treated relative to the working directory of the mypy "
"command, not the config file. Use the ``MYPY_CONFIG_FILE_DIR`` "
"environment variable to refer to paths relative to the config file (e.g. "
"``mypy_path = $MYPY_CONFIG_FILE_DIR/src``)."
msgstr ""

#: ../../source/config_file.rst:183 ../../source/config_file.rst:196
#: ../../source/config_file.rst:225 ../../source/config_file.rst:266
#: ../../source/config_file.rst:279 ../../source/config_file.rst:341
#: ../../source/config_file.rst:363 ../../source/config_file.rst:378
#: ../../source/config_file.rst:389 ../../source/config_file.rst:542
msgid "This option may only be set in the global section (``[mypy]``)."
msgstr ""

#: ../../source/config_file.rst:185
msgid ""
"**Note:** On Windows, use UNC paths to avoid using ``:`` (e.g. "
"``\\\\127.0.0.1\\X$\\MyDir`` where ``X`` is the drive letter)."
msgstr ""

#: ../../source/config_file.rst:189 ../../source/config_file.rst:393
#: ../../source/config_file.rst:400 ../../source/config_file.rst:647
#: ../../source/config_file.rst:815
msgid "comma-separated list of strings"
msgstr ""

#: ../../source/config_file.rst:191
msgid ""
"A comma-separated list of paths which should be checked by mypy if none "
"are given on the command line. Supports recursive file globbing using "
":py:mod:`glob`, where ``*`` (e.g. ``*.py``) matches files in the current "
"directory and ``**/`` (e.g. ``**/*.py``) matches files in any directories"
" below the current one. User home directory and environment variables "
"will be expanded."
msgstr ""

#: ../../source/config_file.rst:200
msgid "regular expression"
msgstr ""

#: ../../source/config_file.rst:202
msgid ""
"A regular expression that matches file names, directory names and paths "
"which mypy should ignore while recursively discovering files to check. "
"Use forward slashes on all platforms."
msgstr ""

#: ../../source/config_file.rst:215
msgid ""
"Crafting a single regular expression that excludes multiple files while "
"remaining human-readable can be a challenge. The above example "
"demonstrates one approach. ``(?x)`` enables the ``VERBOSE`` flag for the "
"subsequent regular expression, which `ignores most whitespace and "
"supports comments`__. The above is equivalent to: "
"``(^one\\.py$|two\\.pyi$|^three\\.)``."
msgstr ""

#: ../../source/config_file.rst:223
msgid "For more details, see :option:`--exclude <mypy --exclude>`."
msgstr ""

#: ../../source/config_file.rst:229
msgid ""
"Note that the TOML equivalent differs slightly. It can be either a single"
" string (including a multi-line string) -- which is treated as a single "
"regular expression -- or an array of such strings. The following TOML "
"examples are equivalent to the above INI example."
msgstr ""

#: ../../source/config_file.rst:234
msgid "Array of strings:"
msgstr ""

#: ../../source/config_file.rst:245
msgid "A single, multi-line string:"
msgstr ""

#: ../../source/config_file.rst:256
msgid "See :ref:`using-a-pyproject-toml`."
msgstr ""

#: ../../source/config_file.rst:260 ../../source/config_file.rst:270
#: ../../source/config_file.rst:283 ../../source/config_file.rst:315
#: ../../source/config_file.rst:355 ../../source/config_file.rst:414
#: ../../source/config_file.rst:422 ../../source/config_file.rst:429
#: ../../source/config_file.rst:436 ../../source/config_file.rst:444
#: ../../source/config_file.rst:451 ../../source/config_file.rst:465
#: ../../source/config_file.rst:473 ../../source/config_file.rst:481
#: ../../source/config_file.rst:488 ../../source/config_file.rst:495
#: ../../source/config_file.rst:512 ../../source/config_file.rst:520
#: ../../source/config_file.rst:537 ../../source/config_file.rst:546
#: ../../source/config_file.rst:553 ../../source/config_file.rst:560
#: ../../source/config_file.rst:568 ../../source/config_file.rst:583
#: ../../source/config_file.rst:591 ../../source/config_file.rst:605
#: ../../source/config_file.rst:613 ../../source/config_file.rst:639
#: ../../source/config_file.rst:653 ../../source/config_file.rst:673
#: ../../source/config_file.rst:681 ../../source/config_file.rst:702
#: ../../source/config_file.rst:709 ../../source/config_file.rst:716
#: ../../source/config_file.rst:723 ../../source/config_file.rst:731
#: ../../source/config_file.rst:738 ../../source/config_file.rst:745
#: ../../source/config_file.rst:758 ../../source/config_file.rst:779
#: ../../source/config_file.rst:786 ../../source/config_file.rst:793
#: ../../source/config_file.rst:802 ../../source/config_file.rst:821
#: ../../source/config_file.rst:828 ../../source/config_file.rst:835
#: ../../source/config_file.rst:856 ../../source/config_file.rst:954
#: ../../source/config_file.rst:962
msgid "boolean"
msgstr ""

#: ../../source/config_file.rst
msgid "Default"
msgstr ""

#: ../../source/config_file.rst:261 ../../source/config_file.rst:271
#: ../../source/config_file.rst:284 ../../source/config_file.rst:316
#: ../../source/config_file.rst:346 ../../source/config_file.rst:356
#: ../../source/config_file.rst:415 ../../source/config_file.rst:423
#: ../../source/config_file.rst:430 ../../source/config_file.rst:437
#: ../../source/config_file.rst:445 ../../source/config_file.rst:452
#: ../../source/config_file.rst:466 ../../source/config_file.rst:474
#: ../../source/config_file.rst:482 ../../source/config_file.rst:489
#: ../../source/config_file.rst:496 ../../source/config_file.rst:513
#: ../../source/config_file.rst:538 ../../source/config_file.rst:547
#: ../../source/config_file.rst:561 ../../source/config_file.rst:569
#: ../../source/config_file.rst:592 ../../source/config_file.rst:606
#: ../../source/config_file.rst:614 ../../source/config_file.rst:640
#: ../../source/config_file.rst:674 ../../source/config_file.rst:682
#: ../../source/config_file.rst:703 ../../source/config_file.rst:710
#: ../../source/config_file.rst:717 ../../source/config_file.rst:724
#: ../../source/config_file.rst:746 ../../source/config_file.rst:780
#: ../../source/config_file.rst:787 ../../source/config_file.rst:794
#: ../../source/config_file.rst:803 ../../source/config_file.rst:822
#: ../../source/config_file.rst:829 ../../source/config_file.rst:836
#: ../../source/config_file.rst:857 ../../source/config_file.rst:955
#: ../../source/config_file.rst:963
msgid "False"
msgstr ""

#: ../../source/config_file.rst:263
msgid ""
"Enables :pep:`420` style namespace packages.  See the corresponding flag "
":option:`--namespace-packages <mypy --namespace-packages>` for more "
"information."
msgstr ""

#: ../../source/config_file.rst:273
msgid ""
"This flag tells mypy that top-level packages will be based in either the "
"current directory, or a member of the ``MYPYPATH`` environment variable "
"or :confval:`mypy_path` config option. This option is only useful in "
"conjunction with :confval:`namespace_packages`. See :ref:`Mapping file "
"paths to modules <mapping-paths-to-modules>` for details."
msgstr ""

#: ../../source/config_file.rst:286
msgid "Suppresses error messages about imports that cannot be resolved."
msgstr ""

#: ../../source/config_file.rst:288 ../../source/config_file.rst:309
msgid ""
"If this option is used in a per-module section, the module name should "
"match the name of the *imported* module, not the module containing the "
"import statement."
msgstr ""

#: ../../source/config_file.rst:295
msgid "``normal``"
msgstr ""

#: ../../source/config_file.rst:297
msgid ""
"Directs what to do with imports when the imported module is found as a "
"``.py`` file and not part of the files, modules and packages provided on "
"the command line."
msgstr ""

#: ../../source/config_file.rst:301
msgid ""
"The four possible values are ``normal``, ``silent``, ``skip`` and "
"``error``.  For explanations see the discussion for the :option"
":`--follow-imports <mypy --follow-imports>` command line flag."
msgstr ""

#: ../../source/config_file.rst:305
msgid ""
"Using this option in a per-module section (potentially with a wildcard, "
"as described at the top of this page) is a good way to prevent mypy from "
"checking portions of your code."
msgstr ""

#: ../../source/config_file.rst:318
msgid ""
"Determines whether to respect the :confval:`follow_imports` setting even "
"for stub (``.pyi``) files."
msgstr ""

#: ../../source/config_file.rst:321
msgid ""
"Used in conjunction with :confval:`follow_imports=skip <follow_imports>`,"
" this can be used to suppress the import of a module from ``typeshed``, "
"replacing it with ``Any``."
msgstr ""

#: ../../source/config_file.rst:325
msgid ""
"Used in conjunction with :confval:`follow_imports=error "
"<follow_imports>`, this can be used to make any use of a particular "
"``typeshed`` module an error."
msgstr ""

#: ../../source/config_file.rst:330
msgid "This is not supported by the mypy daemon."
msgstr ""

#: ../../source/config_file.rst:336
msgid ""
"Specifies the path to the Python executable to inspect to collect a list "
"of available :ref:`PEP 561 packages <installed-packages>`. User home "
"directory and environment variables will be expanded. Defaults to the "
"executable used to run mypy."
msgstr ""

#: ../../source/config_file.rst:345
msgid "bool"
msgstr ""

#: ../../source/config_file.rst:348
msgid ""
"Disables using type information in installed packages (see :pep:`561`). "
"This will also disable searching for a usable Python executable. This "
"acts the same as :option:`--no-site-packages <mypy --no-site-packages>` "
"command line flag."
msgstr ""

#: ../../source/config_file.rst:358
msgid ""
"Enables reporting error messages generated within installed packages (see"
" :pep:`561` for more details on distributing type information). Those "
"error messages are suppressed by default, since you are usually not able "
"to control errors in 3rd party code."
msgstr ""

#: ../../source/config_file.rst:367
msgid "Platform configuration"
msgstr ""

#: ../../source/config_file.rst:373
msgid ""
"Specifies the Python version used to parse and check the target program."
"  The string should be in the format ``MAJOR.MINOR`` -- for example "
"``2.7``.  The default is the version of the Python interpreter used to "
"run mypy."
msgstr ""

#: ../../source/config_file.rst:384
msgid ""
"Specifies the OS platform for the target program, for example ``darwin`` "
"or ``win32`` (meaning OS X or Windows, respectively). The default is the "
"current platform as revealed by Python's :py:data:`sys.platform` "
"variable."
msgstr ""

#: ../../source/config_file.rst:395
msgid ""
"Specifies a list of variables that mypy will treat as compile-time "
"constants that are always true."
msgstr ""

#: ../../source/config_file.rst:402
msgid ""
"Specifies a list of variables that mypy will treat as compile-time "
"constants that are always false."
msgstr ""

#: ../../source/config_file.rst:407
msgid "Disallow dynamic typing"
msgstr ""

#: ../../source/config_file.rst:409
msgid ""
"For more information, see the :ref:`Disallow dynamic typing <disallow-"
"dynamic-typing>` section of the command line docs."
msgstr ""

#: ../../source/config_file.rst:417
msgid ""
"Disallows usage of types that come from unfollowed imports (anything "
"imported from an unfollowed import is automatically given a type of "
"``Any``)."
msgstr ""

#: ../../source/config_file.rst:425
msgid "Disallows all expressions in the module that have type ``Any``."
msgstr ""

#: ../../source/config_file.rst:432
msgid ""
"Disallows functions that have ``Any`` in their signature after decorator "
"transformation."
msgstr ""

#: ../../source/config_file.rst:439
msgid ""
"Disallows explicit ``Any`` in type positions such as type annotations and"
" generic type parameters."
msgstr ""

#: ../../source/config_file.rst:447
msgid ""
"Disallows usage of generic types that do not specify explicit type "
"parameters."
msgstr ""

#: ../../source/config_file.rst:454
msgid "Disallows subclassing a value of type ``Any``."
msgstr ""

#: ../../source/config_file.rst:458
msgid "Untyped definitions and calls"
msgstr ""

#: ../../source/config_file.rst:460
msgid ""
"For more information, see the :ref:`Untyped definitions and calls "
"<untyped-definitions-and-calls>` section of the command line docs."
msgstr ""

#: ../../source/config_file.rst:468
msgid ""
"Disallows calling functions without type annotations from functions with "
"type annotations."
msgstr ""

#: ../../source/config_file.rst:476
msgid ""
"Disallows defining functions without type annotations or with incomplete "
"type annotations."
msgstr ""

#: ../../source/config_file.rst:484
msgid "Disallows defining functions with incomplete type annotations."
msgstr ""

#: ../../source/config_file.rst:491
msgid "Type-checks the interior of functions without type annotations."
msgstr ""

#: ../../source/config_file.rst:498
msgid ""
"Reports an error whenever a function with type annotations is decorated "
"with a decorator without annotations."
msgstr ""

#: ../../source/config_file.rst:505
msgid "None and Optional handling"
msgstr ""

#: ../../source/config_file.rst:507
msgid ""
"For more information, see the :ref:`None and Optional handling <none-and-"
"optional-handling>` section of the command line docs."
msgstr ""

#: ../../source/config_file.rst:515
msgid ""
"Changes the treatment of arguments with a default value of ``None`` by "
"not implicitly making their type :py:data:`~typing.Optional`."
msgstr ""

#: ../../source/config_file.rst:521 ../../source/config_file.rst:554
#: ../../source/config_file.rst:584 ../../source/config_file.rst:654
#: ../../source/config_file.rst:732 ../../source/config_file.rst:739
#: ../../source/config_file.rst:759
msgid "True"
msgstr ""

#: ../../source/config_file.rst:523
msgid ""
"Enables or disables strict Optional checks. If False, mypy treats "
"``None`` as compatible with every type."
msgstr ""

#: ../../source/config_file.rst:526
msgid "**Note:** This was False by default in mypy versions earlier than 0.600."
msgstr ""

#: ../../source/config_file.rst:530
msgid "Configuring warnings"
msgstr ""

#: ../../source/config_file.rst:532
msgid ""
"For more information, see the :ref:`Configuring warnings <configuring-"
"warnings>` section of the command line docs."
msgstr ""

#: ../../source/config_file.rst:540
msgid "Warns about casting an expression to its inferred type."
msgstr ""

#: ../../source/config_file.rst:549
msgid "Warns about unneeded ``# type: ignore`` comments."
msgstr ""

#: ../../source/config_file.rst:556
msgid "Shows errors for missing return statements on some execution paths."
msgstr ""

#: ../../source/config_file.rst:563
msgid ""
"Shows a warning when returning a value with type ``Any`` from a function "
"declared with a non- ``Any`` return type."
msgstr ""

#: ../../source/config_file.rst:571
msgid ""
"Shows a warning when encountering any code inferred to be unreachable or "
"redundant after performing type analysis."
msgstr ""

#: ../../source/config_file.rst:576
msgid "Suppressing errors"
msgstr ""

#: ../../source/config_file.rst:578
msgid ""
"Note: these configuration options are available in the config file only. "
"There is no analog available via the command line options."
msgstr ""

#: ../../source/config_file.rst:586
msgid ""
"Shows errors related to strict ``None`` checking, if the global "
":confval:`strict_optional` flag is enabled."
msgstr ""

#: ../../source/config_file.rst:594
msgid "Ignores all non-fatal errors."
msgstr ""

#: ../../source/config_file.rst:598
msgid "Miscellaneous strictness flags"
msgstr ""

#: ../../source/config_file.rst:600
msgid ""
"For more information, see the :ref:`Miscellaneous strictness flags "
"<miscellaneous-strictness-flags>` section of the command line docs."
msgstr ""

#: ../../source/config_file.rst:608
msgid ""
"Causes mypy to suppress errors caused by not being able to fully infer "
"the types of global and class variables."
msgstr ""

#: ../../source/config_file.rst:616
msgid ""
"Allows variables to be redefined with an arbitrary type, as long as the "
"redefinition is in the same block and nesting level as the original "
"definition. Example where this can be useful:"
msgstr ""

#: ../../source/config_file.rst:627
msgid "The variable must be used before it can be redefined:"
msgstr ""

#: ../../source/config_file.rst:642
msgid ""
"Disallows inferring variable type for ``None`` from two assignments in "
"different scopes. This is always implicitly enabled when using the "
":ref:`mypy daemon <mypy_daemon>`."
msgstr ""

#: ../../source/config_file.rst:649
msgid "Allows disabling one or multiple error codes globally."
msgstr ""

#: ../../source/config_file.rst:656
msgid ""
"By default, imported values to a module are treated as exported and mypy "
"allows other modules to import them. When false, mypy will not re-export "
"unless the item is imported using from-as or is included in ``__all__``. "
"Note that mypy treats stub files as if this is always disabled. For "
"example:"
msgstr ""

#: ../../source/config_file.rst
msgid "type"
msgstr ""

#: ../../source/config_file.rst
msgid "default"
msgstr ""

#: ../../source/config_file.rst:676
msgid ""
"Prohibit equality checks, identity checks, and container checks between "
"non-overlapping types."
msgstr ""

#: ../../source/config_file.rst:684
msgid ""
"Enable all optional error checking flags.  You can see the list of flags "
"enabled by strict mode in the full :option:`mypy --help` output."
msgstr ""

#: ../../source/config_file.rst:688
msgid ""
"Note: the exact list of flags enabled by :confval:`strict` may change "
"over time."
msgstr ""

#: ../../source/config_file.rst:693
msgid "Configuring error messages"
msgstr ""

#: ../../source/config_file.rst:695
msgid ""
"For more information, see the :ref:`Configuring error messages "
"<configuring-error-messages>` section of the command line docs."
msgstr ""

#: ../../source/config_file.rst:698 ../../source/config_file.rst:754
#: ../../source/config_file.rst:811 ../../source/config_file.rst:942
msgid "These options may only be set in the global section (``[mypy]``)."
msgstr ""

#: ../../source/config_file.rst:705
msgid "Prefixes each error with the relevant context."
msgstr ""

#: ../../source/config_file.rst:712
msgid "Shows column numbers in error messages."
msgstr ""

#: ../../source/config_file.rst:719
msgid ""
"Shows error codes in error messages. See :ref:`error-codes` for more "
"information."
msgstr ""

#: ../../source/config_file.rst:726
msgid ""
"Use visually nicer output in error messages: use soft word wrap, show "
"source code snippets, and show error location markers."
msgstr ""

#: ../../source/config_file.rst:734
msgid "Shows error messages with color enabled."
msgstr ""

#: ../../source/config_file.rst:741
msgid "Shows a short summary line after error messages."
msgstr ""

#: ../../source/config_file.rst:748
msgid "Show absolute paths to files."
msgstr ""

#: ../../source/config_file.rst:752
msgid "Incremental mode"
msgstr ""

#: ../../source/config_file.rst:761
msgid "Enables :ref:`incremental mode <incremental>`."
msgstr ""

#: ../../source/config_file.rst:766
msgid "``.mypy_cache``"
msgstr ""

#: ../../source/config_file.rst:768
msgid ""
"Specifies the location where mypy stores incremental cache info. User "
"home directory and environment variables will be expanded. This setting "
"will be overridden by the ``MYPY_CACHE_DIR`` environment variable."
msgstr ""

#: ../../source/config_file.rst:773
msgid ""
"Note that the cache is only read when incremental mode is enabled but is "
"always written to, unless the value is set to ``/dev/null`` (UNIX) or "
"``nul`` (Windows)."
msgstr ""

#: ../../source/config_file.rst:782
msgid "Use an `SQLite`_ database to store the cache."
msgstr ""

#: ../../source/config_file.rst:789
msgid ""
"Include fine-grained dependency information in the cache for the mypy "
"daemon."
msgstr ""

#: ../../source/config_file.rst:796
msgid ""
"Makes mypy use incremental cache data even if it was generated by a "
"different version of mypy. (By default, mypy will perform a version check"
" and regenerate the cache if it was written by older versions of mypy.)"
msgstr ""

#: ../../source/config_file.rst:805
msgid "Skip cache internal consistency checks based on mtime."
msgstr ""

#: ../../source/config_file.rst:809
msgid "Advanced options"
msgstr ""

#: ../../source/config_file.rst:817
msgid ""
"A comma-separated list of mypy plugins. See :ref:`extending-mypy-using-"
"plugins`."
msgstr ""

#: ../../source/config_file.rst:824
msgid "Invokes :mod:`pdb` on fatal error."
msgstr ""

#: ../../source/config_file.rst:831
msgid "Shows traceback on fatal error."
msgstr ""

#: ../../source/config_file.rst:838
msgid "Raise exception on fatal error."
msgstr ""

#: ../../source/config_file.rst:844
msgid ""
"Specifies a custom module to use as a substitute for the :py:mod:`typing`"
" module."
msgstr ""

#: ../../source/config_file.rst:850
msgid ""
"Specifies an alternative directory to look for stubs instead of the "
"default ``typeshed`` directory. User home directory and environment "
"variables will be expanded."
msgstr ""

#: ../../source/config_file.rst:859
msgid ""
"Warns about missing type annotations in typeshed.  This is only relevant "
"in combination with :confval:`disallow_untyped_defs` or "
":confval:`disallow_incomplete_defs`."
msgstr ""

#: ../../source/config_file.rst:864
msgid "Report generation"
msgstr ""

#: ../../source/config_file.rst:866
msgid ""
"If these options are set, mypy will generate a report in the specified "
"format into the specified directory."
msgstr ""

#: ../../source/config_file.rst:873
msgid ""
"Causes mypy to generate a text file report documenting how many "
"expressions of type ``Any`` are present within your codebase."
msgstr ""

#: ../../source/config_file.rst:880
msgid "Causes mypy to generate a Cobertura XML type checking coverage report."
msgstr ""

#: ../../source/config_file.rst:882 ../../source/config_file.rst:892
#: ../../source/config_file.rst:924 ../../source/config_file.rst:934
msgid ""
"To generate this report, you must either manually install the `lxml`_ "
"library or specify mypy installation with the setuptools extra "
"``mypy[reports]``."
msgstr ""

#: ../../source/config_file.rst:890
msgid "Causes mypy to generate an HTML type checking coverage report."
msgstr ""

#: ../../source/config_file.rst:900
msgid ""
"Causes mypy to generate a text file report documenting the functions and "
"lines that are typed and untyped within your codebase."
msgstr ""

#: ../../source/config_file.rst:907
msgid ""
"Causes mypy to generate a JSON file that maps each source file's absolute"
" filename to a list of line numbers that belong to typed functions in "
"that file."
msgstr ""

#: ../../source/config_file.rst:915
msgid ""
"Causes mypy to generate a flat text file report with per-module "
"statistics of how many lines are typechecked etc."
msgstr ""

#: ../../source/config_file.rst:922
msgid "Causes mypy to generate a text file type checking coverage report."
msgstr ""

#: ../../source/config_file.rst:932
msgid "Causes mypy to generate an XML type checking coverage report."
msgstr ""

#: ../../source/config_file.rst:940
msgid "Miscellaneous"
msgstr ""

#: ../../source/config_file.rst:948
msgid ""
"Causes mypy to generate a JUnit XML test result document with type "
"checking results. This can make it easier to integrate mypy with "
"continuous integration (CI) tools."
msgstr ""

#: ../../source/config_file.rst:957
msgid ""
"Makes script ``x`` become module ``x`` instead of ``__main__``.  This is "
"useful when checking multiple scripts in a single run."
msgstr ""

#: ../../source/config_file.rst:965
msgid ""
"Warns about per-module sections in the config file that do not match any "
"files processed when invoking mypy. (This requires turning off "
"incremental mode using :confval:`incremental = False <incremental>`.)"
msgstr ""

#: ../../source/config_file.rst:971
msgid "integer"
msgstr ""

#: ../../source/config_file.rst:972
msgid "0"
msgstr ""

#: ../../source/config_file.rst:974
msgid ""
"Controls how much debug output will be generated.  Higher numbers are "
"more verbose."
msgstr ""

#: ../../source/config_file.rst:980
msgid "Using a pyproject.toml file"
msgstr ""

#: ../../source/config_file.rst:982
msgid ""
"Instead of using a ``mypy.ini`` file, a ``pyproject.toml`` file (as "
"specified by `PEP 518`_) may be used instead. A few notes on doing so:"
msgstr ""

#: ../../source/config_file.rst:985
msgid "The ``[mypy]`` section should have ``tool.`` prepended to its name:"
msgstr ""

#: ../../source/config_file.rst:987
msgid "I.e., ``[mypy]`` would become ``[tool.mypy]``"
msgstr ""

#: ../../source/config_file.rst:989
msgid ""
"The module specific sections should be moved into "
"``[[tool.mypy.overrides]]`` sections:"
msgstr ""

#: ../../source/config_file.rst:991
msgid "For example, ``[mypy-packagename]`` would become:"
msgstr ""

#: ../../source/config_file.rst:999
msgid ""
"Multi-module specific sections can be moved into a single "
"``[[tool.mypy.overrides]]`` section with a module property set to an "
"array of modules:"
msgstr ""

#: ../../source/config_file.rst:1002
msgid "For example, ``[mypy-packagename,packagename2]`` would become:"
msgstr ""

#: ../../source/config_file.rst:1013
msgid ""
"The following care should be given to values in the ``pyproject.toml`` "
"files as compared to ``ini`` files:"
msgstr ""

#: ../../source/config_file.rst:1015
msgid ""
"Strings must be wrapped in double quotes, or single quotes if the string "
"contains special characters"
msgstr ""

#: ../../source/config_file.rst:1017
msgid "Boolean values should be all lower case"
msgstr ""

#: ../../source/config_file.rst:1019
msgid ""
"Please see the `TOML Documentation`_ for more details and information on "
"what is allowed in a ``toml`` file. See `PEP 518`_ for more information "
"on the layout and structure of the ``pyproject.toml`` file."
msgstr ""

#: ../../source/config_file.rst:1024
msgid "Example ``pyproject.toml``"
msgstr ""

#: ../../source/config_file.rst:1026
msgid ""
"Here is an example of a ``pyproject.toml`` file. To use this config file,"
" place it at the root of your repo (or append it to the end of an "
"existing ``pyproject.toml`` file) and run mypy."
msgstr ""

