# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Jukka Lehtosalo
# This file is distributed under the same license as the Mypy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mypy "
"0.940+dev.ff5f71d674aece3095b7a623cc910e48c5a01c1e.dirty\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-04 14:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/introduction.rst:2
msgid "Introduction"
msgstr ""

#: ../../source/introduction.rst:4
msgid ""
"Mypy is a static type checker for Python 3 and Python 2.7. If you "
"sprinkle your code with type annotations, mypy can type check your code "
"and find common bugs. As mypy is a static analyzer, or a lint-like tool, "
"the type annotations are just hints for mypy and don't interfere when "
"running your program. You run your program with a standard Python "
"interpreter, and the annotations are treated effectively as comments."
msgstr ""

#: ../../source/introduction.rst:11
msgid ""
"Using the Python 3 annotation syntax (using :pep:`484` and :pep:`526` "
"notation) or a comment-based annotation syntax for Python 2 code, you "
"will be able to efficiently annotate your code and use mypy to check the "
"code for common errors. Mypy has a powerful and easy-to-use type system "
"with modern features such as type inference, generics, callable types, "
"tuple types, union types, and structural subtyping."
msgstr ""

#: ../../source/introduction.rst:18
msgid ""
"As a developer, you decide how to use mypy in your workflow. You can "
"always escape to dynamic typing as mypy's approach to static typing "
"doesn't restrict what you can do in your programs. Using mypy will make "
"your programs easier to understand, debug, and maintain."
msgstr ""

#: ../../source/introduction.rst:23
msgid ""
"This documentation provides a short introduction to mypy. It will help "
"you get started writing statically typed code. Knowledge of Python and a "
"statically typed object-oriented language, such as Java, are assumed."
msgstr ""

#: ../../source/introduction.rst:29
msgid ""
"Mypy is used in production by many companies and projects, but mypy is "
"officially beta software. There will be occasional changes that break "
"backward compatibility. The mypy development team tries to minimize the "
"impact of changes to user code."
msgstr ""

