# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Jukka Lehtosalo
# This file is distributed under the same license as the Mypy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Mypy "
"0.940+dev.ff5f71d674aece3095b7a623cc910e48c5a01c1e.dirty\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-04 14:39+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/duck_type_compatibility.rst:2
msgid "Duck type compatibility"
msgstr ""

#: ../../source/duck_type_compatibility.rst:4
msgid ""
"In Python, certain types are compatible even though they aren't "
"subclasses of each other. For example, ``int`` objects are valid whenever"
" ``float`` objects are expected. Mypy supports this idiom via *duck type "
"compatibility*. This is supported for a small set of built-in types:"
msgstr ""

#: ../../source/duck_type_compatibility.rst:9
msgid "``int`` is duck type compatible with ``float`` and ``complex``."
msgstr ""

#: ../../source/duck_type_compatibility.rst:10
msgid "``float`` is duck type compatible with ``complex``."
msgstr ""

#: ../../source/duck_type_compatibility.rst:11
msgid "``bytearray`` and ``memoryview`` are duck type compatible with ``bytes``."
msgstr ""

#: ../../source/duck_type_compatibility.rst:12
msgid "In Python 2, ``str`` is duck type compatible with ``unicode``."
msgstr ""

#: ../../source/duck_type_compatibility.rst:14
msgid ""
"For example, mypy considers an ``int`` object to be valid whenever a "
"``float`` object is expected.  Thus code like this is nice and clean and "
"also behaves as expected:"
msgstr ""

#: ../../source/duck_type_compatibility.rst:28
msgid ""
"You can also often use :ref:`protocol-types` to achieve a similar effect "
"in a more principled and extensible fashion. Protocols don't apply to "
"cases like ``int`` being compatible with ``float``, since ``float`` is "
"not a protocol class but a regular, concrete class, and many standard "
"library functions expect concrete instances of ``float`` (or ``int``)."
msgstr ""

#: ../../source/duck_type_compatibility.rst:36
msgid ""
"Note that in Python 2 a ``str`` object with non-ASCII characters is often"
" *not valid* when a unicode string is expected. The mypy type system does"
" not consider a string with non-ASCII values as a separate type so some "
"programs with this kind of error will silently pass type checking. In "
"Python 3 ``str`` and ``bytes`` are separate, unrelated types and this "
"kind of error is easy to detect. This a good reason for preferring Python"
" 3 over Python 2!"
msgstr ""

#: ../../source/duck_type_compatibility.rst:44
msgid ""
"See :ref:`text-and-anystr` for details on how to enforce that a value "
"must be a unicode string in a cross-compatible way."
msgstr ""

